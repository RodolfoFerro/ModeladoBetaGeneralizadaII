#xlab="Simulación",ylab="Frecuencia de tiempos",
border="white", col="steelblue", breaks=breaks)
#lines(density(simulations[,1], adjust=0.8), col="red", lwd=1)
curve(dgb2(x, a, b, p, q), col="olivedrab3", add = T, lwd=2)
dev.off() # Fin de guardado de imagen
setwd("~/Documents/GitHub/ModeladoBetaGeneralizadaII/scripts")
# Rodolfo Ferro Pérez
# ferro@cimat.mx
# Toma de muestras aleatorias de simulaciones y datos reales.
# Liberar memoria:
rm(list=ls())
# IMPORTANTE: Si utilizas RStudio, hay que definir el directorio de trabajo
# al de los archivos fuente, puedes ver el directorio actual con getwd()
# Breaks para histogramas:
breaks = 30
#================== Toma de muestras: ==================#
library(laeken)
library(boot)
library(MASS)
# Filenames and paths:
path_to_csv = "../csv/"
path_to_plt = "../plots/"
sim_prefix  = "sim_"
hist_prefix = "hist_"
files = c("GB2", "LNorm", "LNormMix")
real_data = "mcs_ingresos_2014_concil_2010_csv.csv"
# Tamaño de submuestras:
N = c(200, 500)
for (n in N){
# For simulated data:
for (file_name in files) {
# Leer datos reales desde csv:
datos = read.csv(file=paste(path_to_csv, sim_prefix, file_name, ".csv", sep=''), header = TRUE, sep = ",")
# Toma de submuestras con semilla aleatoria:
set.seed(321)
subsample = datos[sample(1:nrow(datos), n), 1]
#print(subsample)
#================ Histograma de datos: =================#
# Graficamos histograma:
png(paste(path_to_plt, hist_prefix, file_name, "_", n, ".png", sep=''), width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
hist(subsample,freq=F,main=paste("Histograma de ", n, " datos ", file_name, sep=''),
xlab="Datos",ylab="Frecuencia de datos",
border="white", col="firebrick3", breaks=breaks)
#lines(density(subsample, adjust=1.0), col="steelblue", lwd=2)
dev.off() # Fin de guardado de imagen
# Guardamos como csv:
write.table(subsample, file = paste(path_to_csv, "samp_", file_name, "_", n, ".csv", sep=''), sep = ",")
}
# For real data:
# Leer datos reales desde csv:
datos = read.csv(file=paste(path_to_csv, real_data, sep=''), header = TRUE, sep = ",")
# Toma de submuestras con semilla aleatoria:
set.seed(321)
subsample = datos[sample(1:nrow(datos), n), 18]
#print(subsample)
#================ Histograma de datos: =================#
# Graficamos histograma:
png(paste(path_to_plt, hist_prefix, "RealData_", n, ".png", sep=''), width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
hist(subsample,freq=F,main=paste("Histograma de ", n, " datos ", "RealData", sep=''),
xlab="Datos",ylab="Frecuencia de datos",
border="white", col="firebrick3", breaks=breaks)
#lines(density(subsample, adjust=1.0), col="steelblue", lwd=2)
dev.off() # Fin de guardado de imagen
# Guardamos como csv:
write.table(subsample, file = paste(path_to_csv, "samp_RealData", "_", n, ".csv", sep=''), sep = ",")
}
# Rodolfo Ferro Pérez
# ferro@cimat.mx
# Modelado de datos con Beta Generalizada de Tipo II.
# Liberar memoria:
rm(list=ls())
# IMPORTANTE: Si utilizas RStudio, hay que definir el directorio de trabajo
# al de los archivos fuente, puedes ver el directorio actual con getwd()
#=============== Ajuste de parámetros: ===============#
library(boot)
library(MASS)
library(laeken)
# Filenames and paths:
path_to_csv = "../csv/"
path_to_fit = "../fits/"
sub_prefix  = "samp_"
files = c("GB2", "LNorm", "LNormMix", "RealData")
# Tamaño de submuestras:
N = c(200, 500)
for (n in N){
for (file_name in files) {
# Leer datos reales desde csv:
datos = read.csv(file=paste(path_to_csv, sub_prefix, file_name, "_", n, ".csv", sep=''), header = TRUE, sep = ",")
# Ajuste de Máxima verosimiltud:
maxlike_fit = mlfit.gb2(datos[,1])
# Resultados:
print(maxlike_fit[[1]])
# Escribir resultados en archivo:
write.table(maxlike_fit[[1]], file = paste(path_to_fit, "fit_", file_name, "_", n, ".txt", sep=''))
}
}
# Rodolfo Ferro Pérez
# ferro@cimat.mx
# Validar el modelo propuesto.
# Liberar memoria:
rm(list=ls())
# IMPORTANTE: Si utilizas RStudio, hay que definir el directorio de trabajo
# al de los archivos fuente, puedes ver el directorio actual con getwd()
# Breaks para histogramas:
breaks = 50
# Lista de archivos:
# "samp_GB2_200.csv"
# "samp_GB2_500.csv"
# "samp_LNorm_200.csv"
# "samp_LNorm_500.csv"
# "samp_LNormMix_200.csv"
# "samp_LNormMix_500.csv"
# "samp_RealData_200.csv"
# "samp_RealData_500.csv"
# Archivo en uso:
file_name = "samp_GB2_200.csv"
file_name = paste("../csv/", file_name, sep="")
# OBSERVACIÓN:
# Definición manual de parámetros para fits (checar correspondiente archivo fit):
a = 3.03
b = 13619.42
p = 0.97
q = 0.33
#================== Validar modelo: ==================#
library(GB2) # loading package GB2
# Leer datos simulados desde csv:
simulations = read.csv(file=file_name, header = TRUE, sep = ",")
#print(simulations[,1])
# I. Función de Distribución Empírica (FDE):
png('../plots/FDE.png', width=4, height=8, units="in", res=300) # Para iniciar el guardado de imagen
plotsML.gb2(simulations[,1], a, b, p, q, w=rep(1,length(simulations[,1])))[0]
dev.off() # Fin de guardado de imagen
# II. Gráfica cuantil-cuantil:
N = length(simulations[,1])
int = seq((1/(N+1)),(N/(N+1)),by=(1/(N+1)))
vec = qgb2(int, a, b, p, q)
png('../plots/QQ.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
plot(sort(simulations[,1]),sort(vec),main="Cuantil-Cuantil (QQ)", col="navy", lwd=3)
abline(0,1,col="red",lwd="2")
dev.off() # Fin de guardado de imagen
# III. Densidad sobre histograma
png('../plots/histogram_density.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
hist(simulations[,1], freq=F,main="Histograma VS \n Densidad estimada",
#xlab="Simulación",ylab="Frecuencia de tiempos",
border="white", col="steelblue", breaks=breaks)
#lines(density(simulations[,1], adjust=0.8), col="red", lwd=1)
curve(dgb2(x, a, b, p, q), col="olivedrab3", add = T, lwd=2)
dev.off() # Fin de guardado de imagen
# Rodolfo Ferro Pérez
# ferro@cimat.mx
# Validar el modelo propuesto.
# Liberar memoria:
rm(list=ls())
# IMPORTANTE: Si utilizas RStudio, hay que definir el directorio de trabajo
# al de los archivos fuente, puedes ver el directorio actual con getwd()
# Breaks para histogramas:
breaks = 50
# Lista de archivos:
# "samp_GB2_200.csv"
# "samp_GB2_500.csv"
# "samp_LNorm_200.csv"
# "samp_LNorm_500.csv"
# "samp_LNormMix_200.csv"
# "samp_LNormMix_500.csv"
# "samp_RealData_200.csv"
# "samp_RealData_500.csv"
# Archivo en uso:
file_name = "samp_GB2_500.csv"
file_name = paste("../csv/", file_name, sep="")
# OBSERVACIÓN:
# Definición manual de parámetros para fits (checar correspondiente archivo fit):
a = 2.01
b = 10787.44
p = 2.05
q = 0.56
#================== Validar modelo: ==================#
library(GB2) # loading package GB2
# Leer datos simulados desde csv:
simulations = read.csv(file=file_name, header = TRUE, sep = ",")
#print(simulations[,1])
# I. Función de Distribución Empírica (FDE):
png('../plots/FDE.png', width=4, height=8, units="in", res=300) # Para iniciar el guardado de imagen
plotsML.gb2(simulations[,1], a, b, p, q, w=rep(1,length(simulations[,1])))[0]
dev.off() # Fin de guardado de imagen
# II. Gráfica cuantil-cuantil:
N = length(simulations[,1])
int = seq((1/(N+1)),(N/(N+1)),by=(1/(N+1)))
vec = qgb2(int, a, b, p, q)
png('../plots/QQ.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
plot(sort(simulations[,1]),sort(vec),main="Cuantil-Cuantil (QQ)", col="navy", lwd=3)
abline(0,1,col="red",lwd="2")
dev.off() # Fin de guardado de imagen
# III. Densidad sobre histograma
png('../plots/histogram_density.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
hist(simulations[,1], freq=F,main="Histograma VS \n Densidad estimada",
#xlab="Simulación",ylab="Frecuencia de tiempos",
border="white", col="steelblue", breaks=breaks)
#lines(density(simulations[,1], adjust=0.8), col="red", lwd=1)
curve(dgb2(x, a, b, p, q), col="olivedrab3", add = T, lwd=2)
dev.off() # Fin de guardado de imagen
# Rodolfo Ferro Pérez
# ferro@cimat.mx
# Validar el modelo propuesto.
# Liberar memoria:
rm(list=ls())
# IMPORTANTE: Si utilizas RStudio, hay que definir el directorio de trabajo
# al de los archivos fuente, puedes ver el directorio actual con getwd()
# Breaks para histogramas:
breaks = 50
# Lista de archivos:
# "samp_GB2_200.csv"
# "samp_GB2_500.csv"
# "samp_LNorm_200.csv"
# "samp_LNorm_500.csv"
# "samp_LNormMix_200.csv"
# "samp_LNormMix_500.csv"
# "samp_RealData_200.csv"
# "samp_RealData_500.csv"
# Archivo en uso:
file_name = "samp_LNorm_200.csv"
file_name = paste("../csv/", file_name, sep="")
# OBSERVACIÓN:
# Definición manual de parámetros para fits (checar correspondiente archivo fit):
a = 0.54
b = 26217.54
p = 6.33
q = 4.47
#================== Validar modelo: ==================#
library(GB2) # loading package GB2
# Leer datos simulados desde csv:
simulations = read.csv(file=file_name, header = TRUE, sep = ",")
#print(simulations[,1])
# I. Función de Distribución Empírica (FDE):
png('../plots/FDE.png', width=4, height=8, units="in", res=300) # Para iniciar el guardado de imagen
plotsML.gb2(simulations[,1], a, b, p, q, w=rep(1,length(simulations[,1])))[0]
dev.off() # Fin de guardado de imagen
# II. Gráfica cuantil-cuantil:
N = length(simulations[,1])
int = seq((1/(N+1)),(N/(N+1)),by=(1/(N+1)))
vec = qgb2(int, a, b, p, q)
png('../plots/QQ.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
plot(sort(simulations[,1]),sort(vec),main="Cuantil-Cuantil (QQ)", col="navy", lwd=3)
abline(0,1,col="red",lwd="2")
dev.off() # Fin de guardado de imagen
# III. Densidad sobre histograma
png('../plots/histogram_density.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
hist(simulations[,1], freq=F,main="Histograma VS \n Densidad estimada",
#xlab="Simulación",ylab="Frecuencia de tiempos",
border="white", col="steelblue", breaks=breaks)
#lines(density(simulations[,1], adjust=0.8), col="red", lwd=1)
curve(dgb2(x, a, b, p, q), col="olivedrab3", add = T, lwd=2)
dev.off() # Fin de guardado de imagen
# Rodolfo Ferro Pérez
# ferro@cimat.mx
# Validar el modelo propuesto.
# Liberar memoria:
rm(list=ls())
# IMPORTANTE: Si utilizas RStudio, hay que definir el directorio de trabajo
# al de los archivos fuente, puedes ver el directorio actual con getwd()
# Breaks para histogramas:
breaks = 50
# Lista de archivos:
# "samp_GB2_200.csv"
# "samp_GB2_500.csv"
# "samp_LNorm_200.csv"
# "samp_LNorm_500.csv"
# "samp_LNormMix_200.csv"
# "samp_LNormMix_500.csv"
# "samp_RealData_200.csv"
# "samp_RealData_500.csv"
# Archivo en uso:
file_name = "samp_LNorm_500.csv"
file_name = paste("../csv/", file_name, sep="")
# OBSERVACIÓN:
# Definición manual de parámetros para fits (checar correspondiente archivo fit):
a = 0.55
b = 82841.48
p = 4.92
q = 5.76
#================== Validar modelo: ==================#
library(GB2) # loading package GB2
# Leer datos simulados desde csv:
simulations = read.csv(file=file_name, header = TRUE, sep = ",")
#print(simulations[,1])
# I. Función de Distribución Empírica (FDE):
png('../plots/FDE.png', width=4, height=8, units="in", res=300) # Para iniciar el guardado de imagen
plotsML.gb2(simulations[,1], a, b, p, q, w=rep(1,length(simulations[,1])))[0]
dev.off() # Fin de guardado de imagen
# II. Gráfica cuantil-cuantil:
N = length(simulations[,1])
int = seq((1/(N+1)),(N/(N+1)),by=(1/(N+1)))
vec = qgb2(int, a, b, p, q)
png('../plots/QQ.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
plot(sort(simulations[,1]),sort(vec),main="Cuantil-Cuantil (QQ)", col="navy", lwd=3)
abline(0,1,col="red",lwd="2")
dev.off() # Fin de guardado de imagen
# III. Densidad sobre histograma
png('../plots/histogram_density.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
hist(simulations[,1], freq=F,main="Histograma VS \n Densidad estimada",
#xlab="Simulación",ylab="Frecuencia de tiempos",
border="white", col="steelblue", breaks=breaks)
#lines(density(simulations[,1], adjust=0.8), col="red", lwd=1)
curve(dgb2(x, a, b, p, q), col="olivedrab3", add = T, lwd=2)
dev.off() # Fin de guardado de imagen
# Rodolfo Ferro Pérez
# ferro@cimat.mx
# Validar el modelo propuesto.
# Liberar memoria:
rm(list=ls())
# IMPORTANTE: Si utilizas RStudio, hay que definir el directorio de trabajo
# al de los archivos fuente, puedes ver el directorio actual con getwd()
# Breaks para histogramas:
breaks = 50
# Lista de archivos:
# "samp_GB2_200.csv"
# "samp_GB2_500.csv"
# "samp_LNorm_200.csv"
# "samp_LNorm_500.csv"
# "samp_LNormMix_200.csv"
# "samp_LNormMix_500.csv"
# "samp_RealData_200.csv"
# "samp_RealData_500.csv"
# Archivo en uso:
file_name = "samp_LNormMix_200.csv"
file_name = paste("../csv/", file_name, sep="")
# OBSERVACIÓN:
# Definición manual de parámetros para fits (checar correspondiente archivo fit):
a = 2.61
b = 22204.13
p = 0.99
q = 0.25
#================== Validar modelo: ==================#
library(GB2) # loading package GB2
# Leer datos simulados desde csv:
simulations = read.csv(file=file_name, header = TRUE, sep = ",")
#print(simulations[,1])
# I. Función de Distribución Empírica (FDE):
png('../plots/FDE.png', width=4, height=8, units="in", res=300) # Para iniciar el guardado de imagen
plotsML.gb2(simulations[,1], a, b, p, q, w=rep(1,length(simulations[,1])))[0]
dev.off() # Fin de guardado de imagen
# II. Gráfica cuantil-cuantil:
N = length(simulations[,1])
int = seq((1/(N+1)),(N/(N+1)),by=(1/(N+1)))
vec = qgb2(int, a, b, p, q)
png('../plots/QQ.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
plot(sort(simulations[,1]),sort(vec),main="Cuantil-Cuantil (QQ)", col="navy", lwd=3)
abline(0,1,col="red",lwd="2")
dev.off() # Fin de guardado de imagen
# III. Densidad sobre histograma
png('../plots/histogram_density.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
hist(simulations[,1], freq=F,main="Histograma VS \n Densidad estimada",
#xlab="Simulación",ylab="Frecuencia de tiempos",
border="white", col="steelblue", breaks=breaks)
#lines(density(simulations[,1], adjust=0.8), col="red", lwd=1)
curve(dgb2(x, a, b, p, q), col="olivedrab3", add = T, lwd=2)
dev.off() # Fin de guardado de imagen
# Rodolfo Ferro Pérez
# ferro@cimat.mx
# Validar el modelo propuesto.
# Liberar memoria:
rm(list=ls())
# IMPORTANTE: Si utilizas RStudio, hay que definir el directorio de trabajo
# al de los archivos fuente, puedes ver el directorio actual con getwd()
# Breaks para histogramas:
breaks = 50
# Lista de archivos:
# "samp_GB2_200.csv"
# "samp_GB2_500.csv"
# "samp_LNorm_200.csv"
# "samp_LNorm_500.csv"
# "samp_LNormMix_200.csv"
# "samp_LNormMix_500.csv"
# "samp_RealData_200.csv"
# "samp_RealData_500.csv"
# Archivo en uso:
file_name = "samp_LNormMix_500.csv"
file_name = paste("../csv/", file_name, sep="")
# OBSERVACIÓN:
# Definición manual de parámetros para fits (checar correspondiente archivo fit):
a = 1.88
b = 21689.93
p = 1.19
q = 0.35
#================== Validar modelo: ==================#
library(GB2) # loading package GB2
# Leer datos simulados desde csv:
simulations = read.csv(file=file_name, header = TRUE, sep = ",")
#print(simulations[,1])
# I. Función de Distribución Empírica (FDE):
png('../plots/FDE.png', width=4, height=8, units="in", res=300) # Para iniciar el guardado de imagen
plotsML.gb2(simulations[,1], a, b, p, q, w=rep(1,length(simulations[,1])))[0]
dev.off() # Fin de guardado de imagen
# II. Gráfica cuantil-cuantil:
N = length(simulations[,1])
int = seq((1/(N+1)),(N/(N+1)),by=(1/(N+1)))
vec = qgb2(int, a, b, p, q)
png('../plots/QQ.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
plot(sort(simulations[,1]),sort(vec),main="Cuantil-Cuantil (QQ)", col="navy", lwd=3)
abline(0,1,col="red",lwd="2")
dev.off() # Fin de guardado de imagen
# III. Densidad sobre histograma
png('../plots/histogram_density.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
hist(simulations[,1], freq=F,main="Histograma VS \n Densidad estimada",
#xlab="Simulación",ylab="Frecuencia de tiempos",
border="white", col="steelblue", breaks=breaks)
#lines(density(simulations[,1], adjust=0.8), col="red", lwd=1)
curve(dgb2(x, a, b, p, q), col="olivedrab3", add = T, lwd=2)
dev.off() # Fin de guardado de imagen
# Rodolfo Ferro Pérez
# ferro@cimat.mx
# Validar el modelo propuesto.
# Liberar memoria:
rm(list=ls())
# IMPORTANTE: Si utilizas RStudio, hay que definir el directorio de trabajo
# al de los archivos fuente, puedes ver el directorio actual con getwd()
# Breaks para histogramas:
breaks = 50
# Lista de archivos:
# "samp_GB2_200.csv"
# "samp_GB2_500.csv"
# "samp_LNorm_200.csv"
# "samp_LNorm_500.csv"
# "samp_LNormMix_200.csv"
# "samp_LNormMix_500.csv"
# "samp_RealData_200.csv"
# "samp_RealData_500.csv"
# Archivo en uso:
file_name = "samp_RealData_200.csv"
file_name = paste("../csv/", file_name, sep="")
# OBSERVACIÓN:
# Definición manual de parámetros para fits (checar correspondiente archivo fit):
a = 0.32
b = 1183.63
p = 8.71
q = 6.87
#================== Validar modelo: ==================#
library(GB2) # loading package GB2
# Leer datos simulados desde csv:
simulations = read.csv(file=file_name, header = TRUE, sep = ",")
#print(simulations[,1])
# I. Función de Distribución Empírica (FDE):
png('../plots/FDE.png', width=4, height=8, units="in", res=300) # Para iniciar el guardado de imagen
plotsML.gb2(simulations[,1], a, b, p, q, w=rep(1,length(simulations[,1])))[0]
dev.off() # Fin de guardado de imagen
# II. Gráfica cuantil-cuantil:
N = length(simulations[,1])
int = seq((1/(N+1)),(N/(N+1)),by=(1/(N+1)))
vec = qgb2(int, a, b, p, q)
png('../plots/QQ.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
plot(sort(simulations[,1]),sort(vec),main="Cuantil-Cuantil (QQ)", col="navy", lwd=3)
abline(0,1,col="red",lwd="2")
dev.off() # Fin de guardado de imagen
# III. Densidad sobre histograma
png('../plots/histogram_density.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
hist(simulations[,1], freq=F,main="Histograma VS \n Densidad estimada",
#xlab="Simulación",ylab="Frecuencia de tiempos",
border="white", col="steelblue", breaks=breaks)
#lines(density(simulations[,1], adjust=0.8), col="red", lwd=1)
curve(dgb2(x, a, b, p, q), col="olivedrab3", add = T, lwd=2)
dev.off() # Fin de guardado de imagen
# Rodolfo Ferro Pérez
# ferro@cimat.mx
# Validar el modelo propuesto.
# Liberar memoria:
rm(list=ls())
# IMPORTANTE: Si utilizas RStudio, hay que definir el directorio de trabajo
# al de los archivos fuente, puedes ver el directorio actual con getwd()
# Breaks para histogramas:
breaks = 50
# Lista de archivos:
# "samp_GB2_200.csv"
# "samp_GB2_500.csv"
# "samp_LNorm_200.csv"
# "samp_LNorm_500.csv"
# "samp_LNormMix_200.csv"
# "samp_LNormMix_500.csv"
# "samp_RealData_200.csv"
# "samp_RealData_500.csv"
# Archivo en uso:
file_name = "samp_RealData_500.csv"
file_name = paste("../csv/", file_name, sep="")
# OBSERVACIÓN:
# Definición manual de parámetros para fits (checar correspondiente archivo fit):
a = 0.35
b = 2656.93
p = 6.03
q = 6.45
#================== Validar modelo: ==================#
library(GB2) # loading package GB2
# Leer datos simulados desde csv:
simulations = read.csv(file=file_name, header = TRUE, sep = ",")
#print(simulations[,1])
# I. Función de Distribución Empírica (FDE):
png('../plots/FDE.png', width=4, height=8, units="in", res=300) # Para iniciar el guardado de imagen
plotsML.gb2(simulations[,1], a, b, p, q, w=rep(1,length(simulations[,1])))[0]
dev.off() # Fin de guardado de imagen
# II. Gráfica cuantil-cuantil:
N = length(simulations[,1])
int = seq((1/(N+1)),(N/(N+1)),by=(1/(N+1)))
vec = qgb2(int, a, b, p, q)
png('../plots/QQ.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
plot(sort(simulations[,1]),sort(vec),main="Cuantil-Cuantil (QQ)", col="navy", lwd=3)
abline(0,1,col="red",lwd="2")
dev.off() # Fin de guardado de imagen
# III. Densidad sobre histograma
png('../plots/histogram_density.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
hist(simulations[,1], freq=F,main="Histograma VS \n Densidad estimada",
#xlab="Simulación",ylab="Frecuencia de tiempos",
border="white", col="steelblue", breaks=breaks)
#lines(density(simulations[,1], adjust=0.8), col="red", lwd=1)
curve(dgb2(x, a, b, p, q), col="olivedrab3", add = T, lwd=2)
dev.off() # Fin de guardado de imagen
